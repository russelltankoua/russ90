pipeline {
    agent any
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'master', description: 'Enter the name of the branch to build')
    }
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "jenkins-maven"
    }
    stages {
        stage('Build') {
            steps {
                // Use the BRANCH_NAME parameter in the git command to checkout the specified branch
                git branch: params.BRANCH_NAME, url: 'https://github.com/cnsidze/java-project.git'
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                success {
                    archiveArtifacts 'target/*.jar'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Grant Jenkins user access to Docker by adding it to the Docker group
                    sh 'sudo usermod -aG docker jenkins'
                    // Adjust Docker socket permissions
                    sh 'sudo chmod 666 /var/run/docker.sock'
                    // Restart Docker service (optional, might not be necessary depending on your setup)
                    sh 'sudo systemctl restart docker'
                    // Pull Nginx Docker image
                    docker.image('nginx').pull()
                    // Build the Docker image with Nginx configuration
                    docker.build("russlltankoua/nginx:latest", "-f Dockerfile.nginx .")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        // Push the Docker image to Docker Hub
                        docker.image("russlltankoua/nginx:latest").push()
                    }
                }
            }
        }
    }
}

